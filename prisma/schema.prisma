generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
  events        Event[]   @relation("EventCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String    @db.Text
  location    String
  address     String?
  startDate   DateTime
  endDate     DateTime?
  image       String?
  status      String    @default("UPCOMING") // UPCOMING, CANCELLED, COMPLETED
  isPublished Boolean   @default(false)
  featured    Boolean   @default(false)
  tickets     TicketInfo?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String
  creator     User      @relation("EventCreator", fields: [createdBy], references: [id])
}

model TicketInfo {
  id           String   @id @default(cuid())
  eventId      String   @unique
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  price        Float?
  currency     String   @default("EUR")
  buyUrl       String?
  availableFrom DateTime?
  availableTo   DateTime?
  quantity     Int?
}
