generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?   @default("USER")
  accounts       Account[]
  events         Event[]
  tracks         Track[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id               String    @id @default(cuid())
  title            String
  description      String?   @db.Text
  location         String
  address          String?
  startDate        DateTime
  endDate          DateTime?
  status           String    @default("UPCOMING")
  isPublished      Boolean   @default(false)
  image            String?
  originalImageUrl String?
  featured         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User?     @relation(fields: [userId], references: [id])
  userId           String?
  tickets          TicketInfo?

  // Support pour les événements récurrents
  isMasterEvent    Boolean   @default(false)
  masterId         String?
  master           Event?    @relation("EventOccurrences", fields: [masterId], references: [id], onDelete: Cascade)
  occurrences      Event[]   @relation("EventOccurrences")
  recurrenceConfig RecurrenceConfig?
}

model TicketInfo {
  id            String    @id @default(cuid())
  eventId       String    @unique
  price         Float?
  currency      String    @default("EUR")
  buyUrl        String?
  availableFrom DateTime?
  availableTo   DateTime?
  quantity      Int?
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

// Nouvelle table pour stocker la configuration de récurrence
model RecurrenceConfig {
  id        String    @id @default(cuid())
  frequency String    @default("weekly") // 'weekly' ou 'monthly'
  day       Int?      // Jour de la semaine (0-6, 0=dimanche)
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relation avec l'événement
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String    @unique
  
  // Dates exclues stockées sous forme de JSON
  excludedDates Json? // Stocke un tableau de dates ISO
}

// Modèles pour la gestion musicale

model Track {
  id           String           @id @default(cuid())
  title        String
  artist       String
  coverUrl     String?
  releaseDate  DateTime
  bpm          Int?
  description  String?          @db.Text
  type         String           // 'single', 'ep', 'album', 'remix', 'live', 'djset', 'video'
  featured     Boolean          @default(false)
  isPublished  Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user         User?            @relation(fields: [userId], references: [id])
  userId       String?
  
  // Relations
  platforms    TrackPlatform[]
  genres       GenresOnTracks[]
  collection   MusicCollection? @relation(fields: [collectionId], references: [id])
  collectionId String?
}

model TrackPlatform {
  id        String  @id @default(cuid())
  platform  String  // 'spotify', 'youtube', 'soundcloud', 'apple', 'deezer'
  url       String
  embedId   String?
  track     Track   @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id        String          @id @default(cuid())
  name      String          @unique
  tracks    GenresOnTracks[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model GenresOnTracks {
  track     Track   @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId   String
  assignedAt DateTime @default(now())

  @@id([trackId, genreId])
}

model MusicCollection {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  coverUrl    String?
  releaseDate DateTime?
  type        String   // 'album', 'ep', 'compilation', 'playlist'
  tracks      Track[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
