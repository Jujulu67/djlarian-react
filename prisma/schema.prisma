generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?   @default("USER")
  accounts       Account[]
  events         Event[]   @relation("EventCreator")
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  location    String
  address     String?
  startDate   DateTime
  endDate     DateTime?
  image       String?
  originalImageUrl String? @db.Text
  status      String      @default("UPCOMING")
  isPublished Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  featured    Boolean     @default(false)
  creator     User        @relation("EventCreator", fields: [createdBy], references: [id])
  tickets     TicketInfo?
}

model TicketInfo {
  id            String    @id @default(cuid())
  eventId       String    @unique
  price         Float?
  currency      String    @default("EUR")
  buyUrl        String?
  availableFrom DateTime?
  availableTo   DateTime?
  quantity      Int?
  event         Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
