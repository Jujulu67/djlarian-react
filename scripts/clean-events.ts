import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanEvents() {
  try {
    console.log('üßπ Nettoyage de la base de donn√©es des √©v√©nements en cours...');

    // Supprimer d'abord les d√©pendances pour √©viter les contraintes de cl√© √©trang√®re
    console.log('1Ô∏è‚É£ Suppression des configurations de r√©currence...');
    const deletedRecurrenceConfigs = await prisma.recurrenceConfig.deleteMany();
    console.log(`‚úÖ ${deletedRecurrenceConfigs.count} configuration(s) de r√©currence supprim√©e(s)`);

    console.log('2Ô∏è‚É£ Suppression des tickets...');
    const deletedTickets = await prisma.ticketInfo.deleteMany();
    console.log(`‚úÖ ${deletedTickets.count} ticket(s) supprim√©(s)`);

    console.log('3Ô∏è‚É£ Suppression des √©v√©nements...');
    const deletedEvents = await prisma.event.deleteMany();
    console.log(`‚úÖ ${deletedEvents.count} √©v√©nement(s) supprim√©(s)`);

    console.log('üéâ Nettoyage termin√© avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage de la base de donn√©es:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction
cleanEvents();
