'use client';

import { useEffect, useRef, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { GamePattern, GameState } from '@/types/game';
import ParticleVisualizer from './ParticleVisualizer';
import GameVisualizer from './GameVisualizer';
import { useGameManager } from '@/hooks/useGameManager';

interface MusicVisualizerProps {
  isGameActive?: boolean;
  patterns?: GamePattern[];
  onCollision?: (type: 'collect' | 'avoid' | 'golden' | 'enemy') => void;
  audioData?: Uint8Array | null;
  gameState?: GameState;
}

const MusicVisualizer = () => {
  const [audioSrc, setAudioSrc] = useState<string>('/audio/easter-egg.mp3');
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [audioInitialized, setAudioInitialized] = useState<boolean>(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const startGameRef = useRef<boolean>(false); // Ajout d'une référence pour suivre l'état de démarrage

  // Créer l'élément audio une seule fois au montage du composant
  useEffect(() => {
    if (!audioRef.current) {
      console.log("Création de l'élément audio");
      const audio = new Audio();
      audio.loop = true;
      audio.preload = 'auto'; // Précharger l'audio
      audio.src = audioSrc; // Définir la source immédiatement

      // Tenter un préchargement
      audio.load();

      audioRef.current = audio;
    }

    setIsLoading(false);
  }, [audioSrc]);

  // Obtenir le gestionnaire de jeu après l'initialisation de l'audio
  const gameManager = useGameManager(audioRef.current);

  // Ajouter un log pour suivre l'état du jeu
  useEffect(() => {
    console.log('État actuel du jeu:', {
      isActive: gameManager.gameState.isActive,
      score: gameManager.gameState.score,
      patterns: gameManager.patterns.length,
      firstPattern: gameManager.patterns[0]
        ? `${gameManager.patterns[0].type} at ${gameManager.patterns[0].position.x}`
        : 'none',
    });

    // Vérification supplémentaire pour les patterns
    if (gameManager.gameState.isActive && gameManager.patterns.length === 0) {
      console.warn(
        "ALERTE: Le jeu est actif mais aucun pattern n'est disponible. Tentative de correction..."
      );
      // Si nous sommes en jeu actif sans patterns, essayer de relancer le jeu après un court délai
      const timer = setTimeout(() => {
        if (gameManager.gameState.isActive && gameManager.patterns.length === 0) {
          console.log('Tentative de réinitialisation du jeu après absence de patterns');
          gameManager.startGame();
        }
      }, 300);

      return () => clearTimeout(timer);
    }
  }, [gameManager.gameState.isActive, gameManager.patterns]);

  // NOUVEAU: Démarrer simpleUpdateGame automatiquement au chargement
  useEffect(() => {
    // Si nous n'avons pas de patterns, démarrer simpleUpdateGame pour avoir des patterns à afficher
    if (gameManager.patterns.length === 0 && gameManager.simpleUpdateGame) {
      console.log('Démarrage automatique de simpleUpdateGame pour afficher des patterns');

      // Attendre un court instant pour s'assurer que tout est initialisé
      const timer = setTimeout(() => {
        console.log('Démarrage différé de simpleUpdateGame');
        gameManager.simpleUpdateGame();

        // Vérifier après un moment si les patterns sont disponibles
        setTimeout(() => {
          if (gameManager.patterns.length === 0) {
            console.log('Deuxième tentative de démarrage de simpleUpdateGame');
            gameManager.simpleUpdateGame();

            // Dernière tentative après un délai supplémentaire
            setTimeout(() => {
              if (gameManager.patterns.length === 0) {
                console.log("Dernière tentative d'initialisation des patterns via force-refresh");
                // Déclencher l'événement pour forcer la régénération des patterns
                window.dispatchEvent(new CustomEvent('game-regenerate-patterns'));
              } else {
                console.log(
                  `${gameManager.patterns.length} patterns disponibles après 2ème tentative`
                );
              }
            }, 500);
          } else {
            console.log(`${gameManager.patterns.length} patterns disponibles après 1ère tentative`);
          }
        }, 300);
      }, 300);

      return () => clearTimeout(timer);
    }
  }, [gameManager]);

  // Configurer un effet qui vérifie périodiquement si les patterns sont disponibles
  useEffect(() => {
    // S'exécuter uniquement lorsque le gestionnaire de jeu est disponible
    if (!gameManager) return;

    let checkCount = 0;
    const maxChecks = 5;

    // Fonction pour vérifier les patterns
    const checkPatterns = () => {
      checkCount++;
      console.log(
        `Vérification #${checkCount} des patterns : ${gameManager.patterns.length} disponibles`
      );

      if (gameManager.patterns.length === 0 && checkCount < maxChecks) {
        // Si aucun pattern n'est disponible, essayer de les régénérer
        if (gameManager.simpleUpdateGame) {
          console.log(`Tentative de récupération #${checkCount} - Appel de simpleUpdateGame`);
          gameManager.simpleUpdateGame();
        }

        // Continuer les vérifications
        setTimeout(checkPatterns, 700);
      } else if (gameManager.patterns.length > 0) {
        console.log(
          `Patterns restaurés avec succès : ${gameManager.patterns.length} patterns disponibles`
        );
      } else {
        console.warn('Échec de récupération des patterns après plusieurs tentatives');
      }
    };

    // Démarrer les vérifications après un court instant
    const timer = setTimeout(checkPatterns, 1000);

    return () => clearTimeout(timer);
  }, [gameManager]);

  // Configurer les écouteurs d'événements et charger l'audio
  useEffect(() => {
    if (!audioRef.current || audioInitialized) return;

    console.log("Initialisation des écouteurs d'événements audio");
    const audio = audioRef.current;

    // Ajouter des écouteurs d'événements pour le débogage
    const handleLoadStart = () => console.log('Audio loadstart');
    const handleLoadedData = () => console.log('Audio loadeddata');
    const handleCanPlay = () => console.log('Audio canplay');
    const handlePlay = () => console.log('Audio play');
    const handleError = (e: Event) => {
      console.error('Audio error détecté:', e);
      const audioElement = e.target as HTMLAudioElement;
      if (audioElement) {
        console.error("Statut de l'audio:", {
          src: audioElement.src,
          error: audioElement.error
            ? {
                code: audioElement.error.code,
                message: audioElement.error.message,
              }
            : 'Aucune erreur détaillée disponible',
        });
      }
    };

    // Configurer l'élément audio
    audio.src = audioSrc;

    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('loadeddata', handleLoadedData);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('play', handlePlay);
    audio.addEventListener('error', handleError);

    // Charger explicitement l'audio une seule fois
    audio.load();
    setAudioInitialized(true);

    // Fonction pour gérer le changement de musique
    const handleMusicChange = (event: CustomEvent) => {
      if (event.detail?.src) {
        setAudioSrc(event.detail.src);
        audio.src = event.detail.src;
        audio.load();
      }
    };

    // Fonction pour gérer le démarrage du jeu
    const handleGameStart = () => {
      console.log('Événement game-start capturé !');
      console.log("État de l'audio:", !audio.paused ? 'en lecture' : 'en pause', audio.src);
      console.log('État du gameManager:', {
        isActive: gameManager.gameState.isActive,
        audioData: !!gameManager.audioData,
      });

      // Marquer que nous avons tenté de démarrer le jeu
      startGameRef.current = true;

      // Si l'audio est déjà en lecture (démarré par le clic du bouton), on démarre juste le jeu
      if (!audio.paused) {
        console.log('Audio déjà en lecture, démarrage du jeu');
        try {
          // Appel directement startGame
          gameManager.startGame();
          console.log('Jeu démarré depuis handleGameStart (audio déjà en lecture)');
        } catch (err) {
          console.error('Erreur lors du démarrage du jeu:', err);
        }
        return;
      }

      // Si l'audio est encore en pause, tenter de le lancer
      audio
        .play()
        .then(() => {
          console.log('Audio démarré avec succès depuis handleGameStart');
          // Démarrer le jeu après que l'audio a commencé
          try {
            gameManager.startGame();
            console.log('Jeu démarré depuis handleGameStart (après démarrage audio)');
          } catch (err) {
            console.error('Erreur lors du démarrage du jeu après démarrage audio:', err);
          }
        })
        .catch((e) => {
          console.error('Erreur lors du démarrage audio:', e);
          // Essayer de démarrer le jeu même si l'audio a échoué
          try {
            gameManager.startGame();
            console.log('Jeu démarré depuis handleGameStart (malgré échec audio)');
          } catch (err) {
            console.error('Erreur lors du démarrage du jeu après échec audio:', err);
          }
        });
    };

    // Fonction pour forcer le démarrage du jeu (dernier recours)
    const handleForceStart = () => {
      console.log('Événement game-force-start capturé ! Démarrage direct du jeu');

      // Vérifier d'abord l'état de l'audio
      if (audio.paused) {
        console.log("L'audio est en pause, tentative de démarrage...");
        audio
          .play()
          .then(() => console.log('Audio démarré avec succès par force-start'))
          .catch((err) => console.error('Échec du démarrage audio par force-start:', err));
      }

      // Démarrer le jeu de toute façon
      try {
        // Forcer isActive à true de façon préventive
        startGameRef.current = true;

        // Attendre un court instant avant d'appeler startGame
        setTimeout(() => {
          gameManager.startGame();
          console.log('Jeu démarré de force via game-force-start');
        }, 50);
      } catch (err) {
        console.error('Erreur lors du démarrage forcé du jeu:', err);
      }
    };

    // NOUVEAU: Fonction pour régénérer les patterns (en cas d'urgence)
    const handleRegeneratePatterns = () => {
      console.log('Événement game-regenerate-patterns capturé ! Régénération des patterns');

      try {
        if (gameManager.patterns.length === 0) {
          // Si le jeu est actif, utiliser startGame pour générer des patterns
          if (gameManager.gameState.isActive) {
            console.log('Régénération via startGame (jeu actif)');
            gameManager.startGame();
          }
          // Sinon, utiliser simpleUpdateGame directement
          else {
            console.log('Régénération via simpleUpdateGame (jeu inactif)');
            gameManager.simpleUpdateGame();
          }
        } else {
          console.log(
            `Pas besoin de régénérer: ${gameManager.patterns.length} patterns existent déjà`
          );
        }
      } catch (err) {
        console.error('Erreur lors de la régénération des patterns:', err);
      }
    };

    // Écouter les événements
    window.addEventListener('change-music' as any, handleMusicChange);
    window.addEventListener('game-start' as any, handleGameStart);
    window.addEventListener('game-force-start' as any, handleForceStart);
    window.addEventListener('game-regenerate-patterns' as any, handleRegeneratePatterns);

    console.log("Écouteurs d'événements audio configurés");

    return () => {
      // Nettoyer les écouteurs d'événements
      window.removeEventListener('change-music' as any, handleMusicChange);
      window.removeEventListener('game-start' as any, handleGameStart);
      window.removeEventListener('game-force-start' as any, handleForceStart);
      window.removeEventListener('game-regenerate-patterns' as any, handleRegeneratePatterns);

      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('loadeddata', handleLoadedData);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('play', handlePlay);
      audio.removeEventListener('error', handleError);

      audio.pause();
    };
  }, [audioRef, audioSrc, audioInitialized, gameManager]);

  // Effet supplémentaire pour vérifier si le jeu démarre correctement
  useEffect(() => {
    // Si nous avons tenté de démarrer le jeu mais qu'il n'est pas actif après 1 seconde, essayer à nouveau
    if (startGameRef.current && !gameManager.gameState.isActive) {
      console.log('Détection: jeu non démarré malgré la tentative initiale');

      // Vérifier l'état de l'audio
      if (audioRef.current) {
        console.log("État actuel de l'audio:", {
          paused: audioRef.current.paused,
          currentTime: audioRef.current.currentTime,
          readyState: audioRef.current.readyState,
          src: audioRef.current.src,
        });
      }

      // Plusieurs tentatives de démarrage à différents intervalles
      const attempts = [1000, 3000, 5000]; // 1s, 3s, 5s

      attempts.forEach((delay, index) => {
        const timeoutId = setTimeout(() => {
          console.log(`Tentative #${index + 1} de démarrage du jeu après ${delay}ms`);

          // Si le jeu est toujours inactif
          if (!gameManager.gameState.isActive) {
            try {
              console.log('État gameManager avant nouvelle tentative:', {
                isActive: gameManager.gameState.isActive,
                audioData: !!gameManager.audioData,
                isAudioPlaying: audioRef.current
                  ? !audioRef.current.paused
                  : 'audio non disponible',
              });

              // Tenter de jouer l'audio si nécessaire
              if (audioRef.current && audioRef.current.paused) {
                console.log("Tentative de lecture de l'audio");
                audioRef.current
                  .play()
                  .then(() =>
                    console.log('Audio démarré avec succès lors de la tentative de récupération')
                  )
                  .catch((err) =>
                    console.error(
                      'Échec du démarrage audio lors de la tentative de récupération:',
                      err
                    )
                  );
              }

              // Démarrer le jeu peu importe l'état de l'audio
              gameManager.startGame();
              console.log(`Tentative #${index + 1}: Nouveau démarrage du jeu effectué`);
            } catch (err) {
              console.error(`Erreur lors de la tentative #${index + 1} de démarrage du jeu:`, err);
            }
          } else {
            console.log(`Tentative #${index + 1} ignorée: le jeu est déjà actif`);
          }
        }, delay);

        return () => clearTimeout(timeoutId);
      });
    }
  }, [gameManager, gameManager.gameState.isActive]);

  // Fonction déclenchée par le bouton "Appuyez pour jouer"
  const handlePlay = () => {
    console.log('Bouton "Appuyez pour jouer" cliqué');
    const audio = audioRef.current;

    if (!audio) {
      console.error('Élément audio non disponible');
      return;
    }

    // Marquer notre intention de démarrer le jeu
    startGameRef.current = true;

    // Tenter de lancer l'audio
    audio
      .play()
      .then(() => {
        console.log('Audio démarré avec succès depuis le clic du bouton');

        // Dispatch l'événement game-start (le listener handleGameStart sera exécuté)
        window.dispatchEvent(new CustomEvent('game-start'));
      })
      .catch((error) => {
        console.error("Erreur lors du démarrage de l'audio:", error);
        // Même en cas d'échec audio, on tente de démarrer le jeu
        window.dispatchEvent(new CustomEvent('game-start'));
      });
  };

  const handlePause = () => {
    console.log('Fonction handlePause appelée');
    startGameRef.current = false;
    // Mettre le jeu en pause quand la musique s'arrête
    gameManager.endGame();
  };

  return (
    <div className="music-visualizer relative w-full h-full flex flex-col items-center justify-center">
      {/* Conteneur du jeu avec dimensions minimales garanties */}
      <div
        className="game-container relative w-full"
        style={{
          minHeight: '600px',
          minWidth: '1200px',
          height: '100%',
          overflow: 'hidden',
          background: 'rgba(0, 0, 0, 0.2)',
        }}
      >
        <GameVisualizer
          gameData={{
            patterns: gameManager.patterns,
            audioData: gameManager.audioData,
            handleCollision: gameManager.handleCollision,
            gameState: gameManager.gameState,
            setPlayerPosition: gameManager.setPlayerPosition,
            currentBpm: gameManager.currentBpm,
            beatConfidence: gameManager.beatConfidence,
            startGame: gameManager.startGame,
            endGame: gameManager.endGame,
            simpleUpdateGame: gameManager.simpleUpdateGame,
          }}
          audioElement={audioRef.current}
        />
      </div>

      {/* Audio caché */}
      <audio
        ref={audioRef}
        src="/audio/easter-egg.mp3"
        preload="auto"
        loop
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default MusicVisualizer;
